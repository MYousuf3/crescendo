/**
 * Set up static code analysis and quality tools for all build variants
 *
 * - lint
 * - checkstyle
 * - pmd
 * - findbugs
 *
 * Created by Mike Wang on 2018-03-03.
 *
 */

apply plugin: "com.android.application"
apply plugin: 'checkstyle'

dependencies {
    checkstyle 'com.puppycrawl.tools:checkstyle:8.8'
}

final configDir = "$project.rootDir/tools/quality";
final reportsDir = "$project.buildDir/reports"
final gradleTaskGroup = 'Verification'

android {
    lintOptions {
        textOutput "stdout"
        textReport true
        checkAllWarnings true
        warningsAsErrors true
        showAll true
        explainIssues true
        abortOnError false
    }
}

getVariants(project).all { variant ->
    final variantName = variant.name.capitalize()

    task("check${variantName}") {
        group gradleTaskGroup
        description "Runs all checks on the ${variantName} build"
        dependsOn "checkstyle${variantName}"
    }

    task("checkstyle${variantName}", type: Checkstyle) {
        group gradleTaskGroup
        description "Runs checkstyle source code checks on the ${variantName} build"
        dependsOn "compile${variantName}JavaWithJavac"

        configFile file("$configDir/rules-checkstyle.xml")

        source 'src'
        include '**/*.java'

        reports {
            xml.enabled = false
            html.enabled = true
            xml {
                destination file("$reportsDir/checkstyle.xml")
            }
            html {
                destination file("$reportsDir/checkstyle${variantName}.html")
            }
        }
        classpath = files()
    }
}

def getVariants(Project project) {
    if (project.plugins.hasPlugin('com.android.application')) {
        return android.applicationVariants
    } else if (project.plugins.hasPlugin('com.android.library')) {
        return android.libraryVariants
    } else {
        throw new IllegalArgumentException("Passed an invalid android project type")
    }
}
